
service: pubplus-currency-arbitrage-exercise

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: python3.7
  region: eu-central-1

environment:
  RATES_BUCKET: currency-arbitrage-rates

functions:
  DataCollectionService:
    handler: ./Services/DataCollection.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action: s3:GetObject
        Resource: arn:aws:s3:::${env:BROKERS_BUCKET}/*
      - Effect: "Allow"
        Action: s3:PutObject
        Resource: arn:aws:s3:::${env:RATES_BUCKET}/*
    layers:
      # NOTE: this is a third party layer as i did not want to spend time making my own layer through ec2.
      - arn:aws:lambda:eu-central-1:113088814899:layer:Klayers-python37-requests:5
    events:
      - schedule: rate(1 days)
    environment:
      BROKERS_BUCKET: currency-arbitrage-brokers
      BROKERS_FILENAME: brokers.json


  ExchangeRatesRetrievalService:
    handler: ./Services/ExchangeRatesRetrieval.handler

  ExchangePathRecommendationService:
    handler: ./Services/ExchangePathRecommendation.handler

resources:
  Resources:
    BrokersBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BROKERS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    RatesBucket:
      Type: AWS::S3::Bucket
      Properties:
      BucketName: ${env:RATES_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
